// ---------------------------------------------------------------------
//  ADD THIS *BELOW* THE LAST BRACE OF ProductEmbedder
// ---------------------------------------------------------------------

// MARK: - Singleton wrapper (≈ 60 lines)
// Keeps ONE ProductEmbedder alive for the whole app lifecycle.
final class ProductEmbedderManager {

    static let shared = ProductEmbedderManager()
    private init() {}

    private var productEmbedder: ProductEmbedder?
    private var isInitialized  = false
    private let lock           = NSLock()

    /// Compile the YOLO-v8 + MobileViT interpreters exactly once.
    /// Call at launch or lazily before first inference.
    func ensureInitialized(completion: @escaping (Bool) -> Void) {
        lock.lock()
        if isInitialized { lock.unlock(); completion(true); return }
        lock.unlock()

        // ---- adapt the two FileInfo constants below if you renamed files ----
        let yoloInfo   : FileInfo = ("YOLOV8",   "tflite")
        let mobileVitInfo: FileInfo = ("mobilevit","tflite")

        ProductEmbedder.newCoreMLEmbedder(
            localizerModelFileInfo: yoloInfo,
            embedderModelFileInfo: mobileVitInfo
        ) { result in
            switch result {
            case .success(let embedder):
                self.productEmbedder = embedder
                self.isInitialized   = true
                completion(true)
            case .error(let err):
                print("❌ Interpreter init failed: \(err)")
                completion(false)
            }
        }
    }

    // Thin pass-through helpers so the rest of the code doesn’t change.
    func localize(uiImage: UIImage) -> [BoundingBox]? {
        productEmbedder?.localize(uiImage: uiImage)
    }

    func embed(detection: BoundingBox, from cgImage: CGImage) -> [Float]? {
        productEmbedder?.embed(detection: detection,
                               from: UIImage(cgImage: cgImage))
    }
}
