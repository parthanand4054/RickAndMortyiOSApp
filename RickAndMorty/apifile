import Foundation

@main
struct ShelfScanDemoApp: App {
    init() {
        // 1. Find the Caches directory.
        guard let cachesURL = FileManager.default
                .urls(for: .cachesDirectory, in: .userDomainMask)
                .first else {
            print("‚ùå No Caches directory found.")
            return
        }
        print("üìÇ Caches folder: \(cachesURL.path)")
        
        // 2. Look for the 'com.apple.coreml' subfolder.
        let coreMLCacheURL = cachesURL.appendingPathComponent("com.apple.coreml")
        if FileManager.default.fileExists(atPath: coreMLCacheURL.path) {
            print("üìÇ Found CoreML cache at: \(coreMLCacheURL.path)")
            
            // 3. Enumerate everything inside 'com.apple.coreml' and print names + sizes.
            do {
                let items = try FileManager.default.contentsOfDirectory(
                    at: coreMLCacheURL,
                    includingPropertiesForKeys: [.fileSizeKey, .contentModificationDateKey],
                    options: [.skipsHiddenFiles]
                )
                
                for item in items {
                    let attrs = try item.resourceValues(
                        forKeys: [.fileSizeKey, .contentModificationDateKey]
                    )
                    let size = attrs.fileSize.map { ByteCountFormatter.string(fromByteCount: Int64($0), countStyle: .file) }
                              ?? "‚Äì"
                    let date = attrs.contentModificationDate.map { "\($0)" } ?? "‚Äì"
                    print("   ‚Ä¢ \(item.lastPathComponent)  (\(size!), modified: \(date))")
                }
            } catch {
                print("‚ö†Ô∏è Couldn‚Äôt list contents of \(coreMLCacheURL.path): \(error)")
            }
        } else {
            print("‚ÑπÔ∏è No CoreML cache folder exists yet.")
        }
        
        // 4. (Optional) Also print any TFLite‚Äêrelated temp folders, if used:
        let tfliteTempURL = cachesURL.appendingPathComponent("tflite")
        if FileManager.default.fileExists(atPath: tfliteTempURL.path) {
            print("üìÇ Found TFLite temp at: \(tfliteTempURL.path)")
            // ‚Ä¶you could list its contents just like above
        }
    }

    var inferenceViewModel: InferenceViewModel = InferenceViewModel()
    var body: some Scene {
        WindowGroup {
            HomePageView(inferenceViewModel: inferenceViewModel)
        }
    }
}
