import SwiftUI
@_implementationOnly import LivingDesign
@_implementationOnly import Bogle

struct ContentView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var sectionTitle = "A20 Section 21"
    @State private var showReviewBottomSheet = true
    
    var body: some View {
        ZStack {
            Color.black.edgesIgnoringSafeArea(.all)
            
            VStack(spacing: 0) {
                // Navigation Header
                navigationHeader
                
                // Main Image Content
                mainImageContent
                
                Spacer()
            }
            
            // Bottom sheet presenter
            ReviewSectionBottomSheetPresenter(
                isPresented: $showReviewBottomSheet,
                onTryAgain: {
                    // Handle try again action
                    print("Try again tapped")
                },
                onDone: {
                    // Handle done action
                    print("Done tapped")
                }
            )
            .frame(width: 0, height: 0)
        }
        .navigationBarHidden(true)
    }
    
    private var navigationHeader: some View {
        ZStack {
            // Blue background
            Color(red: 0/255, green: 113/255, blue: 220/255)
                .frame(height: 56)
            
            HStack {
                // Back button
                Button(action: {
                    presentationMode.wrappedValue.dismiss()
                }) {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.leading, 16)
                
                Spacer()
                
                // Title
                Text(sectionTitle)
                    .font(Font(UIFont.bogle(ofSize: 16, weight: .bold)))
                    .foregroundColor(.white)
                
                Spacer()
                
                // Help button
                Button(action: {
                    // Handle help action
                }) {
                    Image(systemName: "questionmark.circle")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.trailing, 16)
            }
        }
    }
    
    private var mainImageContent: some View {
        GeometryReader { geometry in
            // Replace with your actual image
            Image("shelf_image") // Add your shelf image to assets
                .resizable()
                .aspectRatio(contentMode: .fit)
                .frame(width: geometry.size.width, height: geometry.size.height)
                .background(Color.black)
        }
    }
}









import UIKit
@_implementationOnly import LivingDesign
@_implementationOnly import Bogle

final class ReviewSectionBottomSheet: LDRootViewController {
    weak var bottomSheetableActionDelegate: LDBottomSheetableActionDelegate?
    
    struct Model {
        let title = "Review section"
        let missingCount = 3
        let misplacedCount = 2
        let unknownCount = 1
        let tryAgainText = "Try again"
        let doneButtonText = "Done"
    }
    
    var model: Model {
        didSet {
            applyModel()
        }
    }
    
    private let expandButton = UIButton()
    private let collapseButton = UIButton()
    private let titleLabel = LDLabel(style: .headingMedium)
    private let statsContainer = UIView()
    private let statsLabel = UILabel()
    private let tryAgainButton = UIButton()
    private let doneButton = LDButton(variant: .primary, size: .large)
    
    // Callbacks
    private let onTryAgain: () -> Void
    private let onDone: () -> Void
    
    init(model: Model = Model(), onTryAgain: @escaping () -> Void, onDone: @escaping () -> Void) {
        self.model = model
        self.onTryAgain = onTryAgain
        self.onDone = onDone
        super.init(nibName: nil, bundle: nil)
        applyModel()
    }
    
    override func constructView() {
        super.constructView()
        
        expandButton.addTarget(self, action: #selector(handleExpandTapped), for: .primaryActionTriggered)
        collapseButton.addTarget(self, action: #selector(handleCollapseTapped), for: .primaryActionTriggered)
        tryAgainButton.addTarget(self, action: #selector(handleTryAgainTapped), for: .primaryActionTriggered)
        doneButton.addTarget(self, action: #selector(handleDoneTapped), for: .primaryActionTriggered)
    }
    
    override func constructSubviewHierarchy() {
        super.constructSubviewHierarchy()
        
        view.addAutoLayoutSubview(expandButton)
        view.addAutoLayoutSubview(collapseButton)
        view.addAutoLayoutSubview(titleLabel)
        view.addAutoLayoutSubview(statsContainer)
        statsContainer.addAutoLayoutSubview(statsLabel)
        view.addAutoLayoutSubview(tryAgainButton)
        view.addAutoLayoutSubview(doneButton)
    }
    
    override func constructSubviewLayoutConstraints() {
        super.constructSubviewLayoutConstraints()
        
        NSLayoutConstraint.activate([
            // Expand/Collapse buttons
            expandButton.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space16),
            expandButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            expandButton.widthAnchor.constraint(equalToConstant: LDSpacing.space24),
            expandButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            collapseButton.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space16),
            collapseButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            collapseButton.widthAnchor.constraint(equalToConstant: LDSpacing.space24),
            collapseButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            // Title
            titleLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space16),
            titleLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            // Stats container
            statsContainer.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: LDSpacing.space16),
            statsContainer.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            statsContainer.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            statsContainer.heightAnchor.constraint(equalToConstant: LDSpacing.space32),
            
            statsLabel.centerXAnchor.constraint(equalTo: statsContainer.centerXAnchor),
            statsLabel.centerYAnchor.constraint(equalTo: statsContainer.centerYAnchor),
            
            // Try again button
            tryAgainButton.topAnchor.constraint(equalTo: statsContainer.bottomAnchor, constant: LDSpacing.space16),
            tryAgainButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            tryAgainButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            // Done button
            doneButton.topAnchor.constraint(equalTo: tryAgainButton.bottomAnchor, constant: LDSpacing.space16),
            doneButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            doneButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            doneButton.heightAnchor.constraint(equalToConstant: LDSpacing.space40),
            doneButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -LDSpacing.space16)
        ])
    }
    
    private func applyModel() {
        // Expand/Collapse buttons
        expandButton.setImage(LDIcon.chevronUp.image, for: .normal)
        collapseButton.setImage(LDIcon.close.image, for: .normal)
        
        // Title
        titleLabel.font = UIFont.bogle(ofSize: LDSpacing.space20, weight: .bold)
        titleLabel.textAlignment = .center
        titleLabel.text = model.title
        
        // Stats
        let attributedString = NSMutableAttributedString()
        
        // Missing
        let missingAttachment = NSTextAttachment()
        missingAttachment.image = UIImage(systemName: "exclamationmark.circle.fill")?.withTintColor(.red, renderingMode: .alwaysOriginal)
        missingAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: missingAttachment))
        attributedString.append(NSAttributedString(string: " Missing (\(model.missingCount))  ", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        // Misplaced
        let misplacedAttachment = NSTextAttachment()
        misplacedAttachment.image = UIImage(systemName: "exclamationmark.triangle.fill")?.withTintColor(.systemYellow, renderingMode: .alwaysOriginal)
        misplacedAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: misplacedAttachment))
        attributedString.append(NSAttributedString(string: " Misplaced (\(model.misplacedCount))  ", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        // Unknown
        let unknownAttachment = NSTextAttachment()
        unknownAttachment.image = UIImage(systemName: "circle.fill")?.withTintColor(.orange, renderingMode: .alwaysOriginal)
        unknownAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: unknownAttachment))
        attributedString.append(NSAttributedString(string: " Unknown (\(model.unknownCount))", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        statsLabel.attributedText = attributedString
        
        // Try again button
        let tryAgainAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.bogle(ofSize: LDSpacing.space16, weight: .regular),
            .foregroundColor: UIColor.black,
            .underlineStyle: NSUnderlineStyle.single.rawValue
        ]
        tryAgainButton.setAttributedTitle(NSAttributedString(string: model.tryAgainText, attributes: tryAgainAttributes), for: .normal)
        
        // Done button
        doneButton.dataModel = LDButton.Model(
            variant: .primary,
            size: .large,
            text: model.doneButtonText
        )
    }
    
    @objc private func handleExpandTapped() {
        // Handle expand
    }
    
    @objc private func handleCollapseTapped() {
        self.dismiss(animated: true)
    }
    
    @objc private func handleTryAgainTapped() {
        self.dismiss(animated: true) {
            self.onTryAgain()
        }
    }
    
    @objc private func handleDoneTapped() {
        self.dismiss(animated: true) {
            self.onDone()
        }
    }
}

// MARK: - LDBottomSheetable
extension ReviewSectionBottomSheet: LDBottomSheetable {
    var contentView: UIView { view }
    var tiersType: LDBottomSheetTierType { .oneTierAutomatic }
    var isDismissable: Bool { true }
    var shouldHideGrabber: Bool { true }
    var shouldIgnoreTabBar: Bool { true }
}





import SwiftUI
@_implementationOnly import LivingDesign

struct ReviewSectionBottomSheetPresenter: UIViewControllerRepresentable {
    @Binding var isPresented: Bool
    let onTryAgain: () -> Void
    let onDone: () -> Void
    
    func makeUIViewController(context: Context) -> UIViewController {
        let viewController = UIViewController()
        viewController.view.backgroundColor = .clear
        return viewController
    }
    
    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {
        if isPresented && uiViewController.presentedViewController == nil {
            let bottomSheet = ReviewSectionBottomSheet(
                onTryAgain: {
                    isPresented = false
                    onTryAgain()
                },
                onDone: {
                    isPresented = false
                    onDone()
                }
            )
            
            if let navigationController = uiViewController.navigationController {
                navigationController.presentBottomSheet(bottomSheet, as: .modal)
            } else {
                uiViewController.presentBottomSheet(bottomSheet, as: .modal)
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                if let presented = uiViewController.presentedViewController {
                    presented.presentationController?.delegate = context.coordinator
                }
            }
        }
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(isPresented: $isPresented)
    }
    
    class Coordinator: NSObject, UIAdaptivePresentationControllerDelegate {
        @Binding var isPresented: Bool
        
        init(isPresented: Binding<Bool>) {
            _isPresented = isPresented
        }
        
        func presentationControllerDidDismiss(_ presentationController: UIPresentationController) {
            isPresented = false
        }
    }
}
