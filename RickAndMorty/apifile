import UIKit
import Combine

class PhotoGalleryViewModel: ObservableObject {
    @Published var images: [PhotoItem] = []
    @Published var selectedImages: Set<UUID> = []
    @Published var isSelectionMode: Bool = false
    
    private let imageStoreManager: ImageStoreManaging
    private let dataType: ImageStoreDataType
    private var cancellables = Set<AnyCancellable>()
    
    struct PhotoItem: Identifiable {
        let id = UUID()
        let image: UIImage
        let url: URL
    }
    
    init(imageStoreManager: ImageStoreManaging, dataType: ImageStoreDataType) {
        self.imageStoreManager = imageStoreManager
        self.dataType = dataType
        loadImages()
    }
    
    func loadImages() {
        let imageURLs = dataType == .productEnrollment 
            ? imageStoreManager.pendingProductImageUploads 
            : imageStoreManager.pendingSectionImageUploads
        
        images = imageURLs.compactMap { url in
            guard let data = try? Data(contentsOf: url),
                  let image = UIImage(data: data) else { return nil }
            return PhotoItem(image: image, url: url)
        }.reversed() // Show newest first
    }
    
    func toggleSelection(for item: PhotoItem) {
        if selectedImages.contains(item.id) {
            selectedImages.remove(item.id)
        } else {
            selectedImages.insert(item.id)
        }
        
        // If no images selected, exit selection mode
        if selectedImages.isEmpty {
            isSelectionMode = false
        }
    }
    
    func deleteSelectedImages() {
        let itemsToDelete = images.filter { selectedImages.contains($0.id) }
        
        for item in itemsToDelete {
            imageStoreManager.deleteImage(at: item.url.path)
        }
        
        // Clear selection and reload
        selectedImages.removeAll()
        isSelectionMode = false
        loadImages()
    }
    
    var hasSelectedImages: Bool {
        !selectedImages.isEmpty
    }
}



import SwiftUI
@_implementationOnly import LivingDesign
@_implementationOnly import Bogle

struct PhotoGalleryView: View {
    @ObservedObject var viewModel: PhotoGalleryViewModel
    @Environment(\.presentationMode) var presentationMode
    
    private let columns = [
        GridItem(.flexible(), spacing: 2),
        GridItem(.flexible(), spacing: 2),
        GridItem(.flexible(), spacing: 2)
    ]
    
    var body: some View {
        ZStack {
            Color.black.edgesIgnoringSafeArea(.all)
            
            VStack(spacing: 0) {
                // Navigation Header
                PhotoGalleryHeaderView(
                    viewModel: viewModel,
                    onBack: {
                        presentationMode.wrappedValue.dismiss()
                    },
                    onDelete: {
                        viewModel.deleteSelectedImages()
                    }
                )
                
                // Photo Grid
                if viewModel.images.isEmpty {
                    emptyStateView
                } else {
                    photoGrid
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    private var photoGrid: some View {
        ScrollView {
            LazyVGrid(columns: columns, spacing: 2) {
                ForEach(viewModel.images) { item in
                    PhotoGridItem(
                        item: item,
                        isSelected: viewModel.selectedImages.contains(item.id),
                        onTap: {
                            viewModel.isSelectionMode = true
                            viewModel.toggleSelection(for: item)
                        }
                    )
                }
            }
            .padding(2)
        }
    }
    
    private var emptyStateView: some View {
        VStack {
            Spacer()
            Text("No photos captured yet")
                .font(Font(UIFont.bogle(ofSize: 16, weight: .regular)))
                .foregroundColor(.white)
            Spacer()
        }
    }
}

struct PhotoGalleryHeaderView: View {
    @ObservedObject var viewModel: PhotoGalleryViewModel
    let onBack: () -> Void
    let onDelete: () -> Void
    
    var body: some View {
        HStack {
            Button(action: onBack) {
                Image(systemName: "chevron.left")
                    .foregroundColor(.white)
                    .frame(width: 24, height: 24)
            }
            .padding(.leading, 16)
            
            Spacer()
            
            Text("Photos (\(viewModel.images.count))")
                .font(Font(UIFont.bogle(ofSize: 16, weight: .bold)))
                .foregroundColor(.white)
            
            Spacer()
            
            Button(action: onDelete) {
                Image(systemName: "trash")
                    .foregroundColor(viewModel.hasSelectedImages ? .white : .gray)
                    .frame(width: 24, height: 24)
            }
            .disabled(!viewModel.hasSelectedImages)
            .padding(.trailing, 16)
        }
        .frame(height: 56)
        .background(Color.blue)
    }
}

struct PhotoGridItem: View {
    let item: PhotoGalleryViewModel.PhotoItem
    let isSelected: Bool
    let onTap: () -> Void
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                Image(uiImage: item.image)
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(width: geometry.size.width, height: geometry.size.width)
                    .clipped()
                
                if isSelected {
                    Color.black.opacity(0.4)
                    
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                        .font(.system(size: 24))
                }
            }
            .onTapGesture {
                onTap()
            }
        }
        .aspectRatio(1, contentMode: .fit)
    }
}
