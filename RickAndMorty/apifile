import CoreGraphics

extension CGRect {
    /// Returns Intersection-over-Union (0â€¦1) with another rect *in the same coordinate space*.
    func iou(with other: CGRect) -> CGFloat {
        let intersection = self.intersection(other)
        guard !intersection.isNull, intersection.width > 0, intersection.height > 0 else { return 0 }

        let interArea = intersection.width * intersection.height
        let unionArea  = self.width * self.height + other.width * other.height - interArea
        return interArea / unionArea
    }
}




for i in 0..<newPredictions.count {
    let newBox = newPredictions[i]

    // Find the *single* previous box that overlaps most with this one
    // (optional; you can also just break on first IoU > 0.5)
    var bestMatch: BoundingBox? = nil
    var bestIoU: CGFloat = 0

    if let oldBoxes = oldBoxes {
        for oldBox in oldBoxes {
            let iou = newBox.rect.iou(with: oldBox.rect)
            if iou > bestIoU {
                bestIoU = iou
                bestMatch = oldBox
            }
        }
    }

    // Reuse label only if the areas overlap enough
    if bestIoU > 0.5, let match = bestMatch {
        newPredictions[i].prodID = match.prodID
    }
}



