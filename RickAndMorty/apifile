
import SwiftUI
@_implementationOnly import LivingDesign
@_implementationOnly import Bogle

final class DeletePhotosBottomSheet: LDRootViewController {
    weak var bottomSheetableActionDelegate: LDBottomSheetableActionDelegate?
    
    struct Model {
        let closeIcon: LDIcon = .close
        let titleText: String
        let descriptionText = """
        Blurry, crooked, or imperfect item photos are still
        valuable for training our models. Deleting them
        may reduce model accuracy.
        """
        let primaryButtonTitle = "Delete"
        let secondaryButtonTitle = "Cancel"
    }
    
    var model: Model {
        didSet {
            applyModel()
        }
    }
    
    // UI Components following the existing pattern
    private let closeButton = UIButton()
    private let titleLabel = LDLabel(style: .headingMediumAlt)
    private let descriptionLabel = LDLabel(style: .bodyMedium)
    private let divider = LDDivider(style: .horizontal)
    private let deleteButton = LDButton(variant: .primary, size: .large)
    private let cancelButton = LDButton(variant: .secondary, size: .large)
    
    // Callback for when delete is confirmed
    private let onDeleteConfirmed: () -> Void
    
    init(photoCount: Int, onDeleteConfirmed: @escaping () -> Void) {
        self.model = Model(titleText: "Delete \(photoCount) photo\(photoCount == 1 ? "" : "s")?")
        self.onDeleteConfirmed = onDeleteConfirmed
        super.init(nibName: nil, bundle: nil)
        applyModel()
    }
    
    override func constructView() {
        super.constructView()
        
        // Set up button actions
        closeButton.addTarget(self, action: #selector(handleCloseButtonTapped), for: .primaryActionTriggered)
        deleteButton.addTarget(self, action: #selector(handleDeleteButtonTapped), for: .primaryActionTriggered)
        cancelButton.addTarget(self, action: #selector(handleCancelButtonTapped), for: .primaryActionTriggered)
    }
    
    override func constructSubviewHierarchy() {
        super.constructSubviewHierarchy()
        
        view.addAutoLayoutSubview(closeButton)
        view.addAutoLayoutSubview(titleLabel)
        view.addAutoLayoutSubview(descriptionLabel)
        view.addAutoLayoutSubview(divider)
        view.addAutoLayoutSubview(deleteButton)
        view.addAutoLayoutSubview(cancelButton)
    }
    
    override func constructSubviewLayoutConstraints() {
        super.constructSubviewLayoutConstraints()
        
        NSLayoutConstraint.activate([
            // Close button - top right
            closeButton.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space16),
            closeButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            closeButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            closeButton.widthAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            // Title label - centered
            titleLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space16),
            titleLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            titleLabel.leadingAnchor.constraint(greaterThanOrEqualTo: view.leadingAnchor, constant: LDSpacing.space48),
            titleLabel.trailingAnchor.constraint(lessThanOrEqualTo: closeButton.leadingAnchor, constant: -LDSpacing.space16),
            
            // Description label
            descriptionLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: LDSpacing.space16),
            descriptionLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            descriptionLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            
            // Divider
            divider.topAnchor.constraint(equalTo: descriptionLabel.bottomAnchor, constant: LDSpacing.space24),
            divider.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            divider.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            // Delete button (primary - red)
            deleteButton.topAnchor.constraint(equalTo: divider.bottomAnchor, constant: LDSpacing.space16),
            deleteButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            deleteButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            deleteButton.heightAnchor.constraint(equalToConstant: LDSpacing.space40),
            
            // Cancel button (secondary)
            cancelButton.topAnchor.constraint(equalTo: deleteButton.bottomAnchor, constant: LDSpacing.space16),
            cancelButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            cancelButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            cancelButton.heightAnchor.constraint(equalToConstant: LDSpacing.space40),
            cancelButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -LDSpacing.space16)
        ])
    }
    
    private func applyModel() {
        // Close button
        closeButton.setImage(model.closeIcon.image, for: .normal)
        
        // Title
        titleLabel.font = UIFont.bogle(ofSize: LDSpacing.space20, weight: .bold)
        titleLabel.textAlignment = .center
        titleLabel.text = model.titleText
        
        // Description
        descriptionLabel.font = UIFont.bogle(ofSize: LDSpacing.space16, weight: .regular)
        descriptionLabel.numberOfLines = 0
        descriptionLabel.textAlignment = .center
        descriptionLabel.text = model.descriptionText
        
        // Delete button - using destructive/error styling for red color
        deleteButton.dataModel = LDButton.Model(
            variant: .destructive, // This should give us the red color
            size: .small,
            text: model.primaryButtonTitle
        )
        
        // If .destructive variant doesn't exist, we can set background color manually
        deleteButton.backgroundColor = UIColor(red: 0.796, green: 0.224, blue: 0.141, alpha: 1.0) // Red color from design
        deleteButton.layer.cornerRadius = LDSpacing.space20
        
        // Cancel button
        cancelButton.dataModel = LDButton.Model(
            variant: .secondary,
            size: .small,
            text: model.secondaryButtonTitle
        )
    }
    
    @objc private func handleCloseButtonTapped() {
        self.dismiss(animated: true)
    }
    
    @objc private func handleDeleteButtonTapped() {
        self.dismiss(animated: true) {
            self.onDeleteConfirmed()
        }
    }
    
    @objc private func handleCancelButtonTapped() {
        self.dismiss(animated: true)
    }
}

// MARK: - LDBottomSheetable
extension DeletePhotosBottomSheet: LDBottomSheetable {
    var contentView: UIView { view }
    var tiersType: LDBottomSheetTierType { .oneTierAutomatic }
    var isDismissable: Bool { true }
    var shouldHideGrabber: Bool { true }
    var shouldIgnoreTabBar: Bool { true }
}
