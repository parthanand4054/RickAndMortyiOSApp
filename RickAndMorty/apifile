//
//  LoginView.swift
//  ShelfScanDemo
//

import SwiftUI

struct LoginView: View {
    @State private var username: String = ""
    @State private var password: String = ""
    @State private var showStoreNumberView = false
    @State private var showAlert: Bool = false
    @EnvironmentObject var tokenViewModel: TokenViewModel
    
    // Hardcoded credentials
    private let validUsername = "admin"
    private let validPassword = "admin"
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background color to match screenshot
                Color(white: 1)
                    .ignoresSafeArea()
                
                VStack(spacing: 20) {
                    // App title
                    Text("Compass Vision")
                        .font(.system(size: 34, weight: .semibold))
                        .foregroundColor(.black)
                        .padding(.vertical, 100)
                    
                    textFieldsAndButton
                    
                    Spacer()
                    
                    // Navigation to StoreNumberView (hidden)
                    NavigationLink(destination: StoreNumberView(), isActive: $showStoreNumberView) {
                        EmptyView()
                    }
                }
                .navigationBarHidden(true)
                .alert(isPresented: $showAlert) {
                    Alert(
                        title: Text("Error"),
                        message: Text("Invalid username or password"),
                        dismissButton: .default(Text("OK"))
                    )
                }
            }
        }
    }
    
    var textFieldsAndButton: some View {
        VStack(spacing: 20) {
            // Username field
            VStack(alignment: .leading, spacing: 8) {
                Text("Username")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.black)
                
                TextField("", text: $username)
                    .foregroundColor(.black)
                    .padding()
                    .frame(height: 56)
                    .background(Color.white)
                    .overlay(
                        RoundedRectangle(cornerRadius: 4)
                            .stroke(Color.gray, lineWidth: 0.7)
                    )
            }
            
            // Password field
            VStack(alignment: .leading, spacing: 8) {
                Text("Password")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.black)
                
                SecureField("", text: $password)
                    .foregroundColor(.black)
                    .padding()
                    .frame(height: 56)
                    .background(Color.white)
                    .overlay(
                        RoundedRectangle(cornerRadius: 4)
                            .stroke(Color.gray, lineWidth: 0.7)
                    )
            }
            
            // Continue button
            Button(action: {
                if username == validUsername && password == validPassword {
                    showStoreNumberView = true
                } else {
                    showAlert = true
                }
            }) {
                Text("Continue")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .frame(height: 48)
                    .background(Color(red: 0/255, green: 113/255, blue: 220/255))
                    .cornerRadius(28)
            }
        }
        .padding(.horizontal, 20)
        .onTapGesture {
            // Dismiss keyboard when tapping outside
            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
        }
    }
}

struct LoginView_Previews: PreviewProvider {
    static var previews: some View {
        LoginView()
            .environmentObject(TokenViewModel(networkService: NetworkService(keychainService: KeychainService.standard)))
    }
}
