func test_fetchItemInfo_withNetworkError_shouldHandleGracefully() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    mockItemDetailService._shouldFail = true
    
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .productEnrollment
    
    // Mock store ID for keychain
    try? KeychainService.standard.saveStoreId(100)
    
    mockCameraManager.setCapturedData(.barcode("invalid_barcode", .ean13))
    
    // Wait for processing
    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
        XCTAssertNil(cameraViewModel.productInfo)
        exp.fulfill()
    }
    
    wait(for: [exp], timeout: 2.0)
}
