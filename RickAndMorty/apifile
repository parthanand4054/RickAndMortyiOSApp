// MARK: - Helpers
    private func makeSUT() -> CameraViewModel {
        CameraViewModel(
            imageStoreManager: ImageStoreManager(),
            itemDetailService: MockItemDetailService(
                urlSession: MockURLSession(),
                keychainService: KeychainService.standard
            ),
            sectionScanService: MockSectionLabelService(
                urlSession: MockURLSession(),
                keychainService: KeychainService.standard
            ),
            cameraManager: mockCameraManager
        )
    }

    // MARK: - Tests

    // 1Ô∏è‚É£ ---------------------------------------------------------
    func test_setImageCaptureMode_shouldSetPhotoCaptureMode() {
        let sut = makeSUT()

        sut.setImageCaptureMode()

        XCTAssertEqual(sut.captureMode, .photo)
        XCTAssertEqual(mockCameraManager.currentCaptureMode, .photo)
    }

    // 2Ô∏è‚É£ ---------------------------------------------------------
    func test_restartProductScanner_shouldResetStateAndSetBarcodeMode() {
        let sut = makeSUT()

        sut.isBarCodeScanned = true
        sut.productInfo     = TestData.productInfoResponse

        sut.restartProductScanner()

        XCTAssertFalse(sut.isBarCodeScanned)
        XCTAssertEqual(sut.captureMode, .barcode)
        XCTAssertEqual(mockCameraManager.currentCaptureMode, .barcode)
    }

    // 3Ô∏è‚É£ ---------------------------------------------------------
    func test_showErrorAlert_shouldSetAlertErrorAndShowAlert() {
        let exp = expectation(description: #function)
        let sut = makeSUT()
        let message = "Test error message"

        sut.showErrorAlert(with: message)

        sut.$showAlertError
            .sink { value in
                guard value else { return }
                XCTAssertEqual(sut.alertError.title,   "Error")
                XCTAssertEqual(sut.alertError.message, message)
                exp.fulfill()
            }
            .store(in: &cancellables)

        wait(for: [exp], timeout: 0.3)
    }

    // 4Ô∏è‚É£ ---------------------------------------------------------
    func test_captureImage_shouldCallCameraManagerCaptureImage() {
        let sut = makeSUT()

        sut.captureImage()

        XCTAssertTrue(mockCameraManager.didCallCaptureImage)
    }

    // 5Ô∏è‚É£ ---------------------------------------------------------
    func test_setupBindings_sectionBarCodeScanner_shouldSetCorrectShelfLocation() {
        let exp = expectation(description: #function)
        let sut = makeSUT()

        sut.setupBindings()
        sut.subFlowType     = .sectionBarCodeScanner
        sut.sectionLocation = "A20 Section 60"
        try? KeychainService.standard.saveStoreId(100)

        sut.$bottomSheetStatus
            .dropFirst()
            .sink { status in
                if case let .correctShelfLocation(loc) = status {
                    XCTAssertEqual(loc, "A20 Section 60")
                    exp.fulfill()
                }
            }
            .store(in: &cancellables)

        mockCameraManager.setCapturedData(.barcode("123456", .ean13))
        wait(for: [exp], timeout: 0.5)
    }

    // 6Ô∏è‚É£ ---------------------------------------------------------
    func test_setupBindings_sectionImageCapture_shouldIncrementCountAndSaveImage() {
        let exp = expectation(description: #function)
        let sut = makeSUT()

        sut.setupBindings()
        sut.subFlowType = .sectionImageCapture

        sut.$capturedImageCount
            .dropFirst()
            .sink { count in
                XCTAssertEqual(count, 1)
                XCTAssertNotNil(sut.lastCapturedImage)
                exp.fulfill()
            }
            .store(in: &cancellables)

        mockCameraManager.setCapturedData(.image(.checkmark))
        wait(for: [exp], timeout: 0.3)
    }

    // 7Ô∏è‚É£ ---------------------------------------------------------
    func test_capturedImageCount_shouldIncrementOnProductEnrollmentFlow() {
        let exp = expectation(description: #function)
        let sut = makeSUT()
        sut.setupBindings()
        sut.subFlowType = .productEnrollment
        let initial = sut.capturedImageCount
        try? KeychainService.standard.saveStoreId(100)

        // 1. scan barcode ‚ûú receive product info
        sut.$productInfo
            .compactMap { $0 }
            .first()
            .sink { _ in
                // 2. now capture a photo
                self.mockCameraManager.setCapturedData(.image(.checkmark))
            }
            .store(in: &cancellables)

        // 3. expect counter to increment
        sut.$capturedImageCount
            .dropFirst()
            .sink { count in
                XCTAssertEqual(count, initial + 1)
                exp.fulfill()
            }
            .store(in: &cancellables)

        mockCameraManager.setCapturedData(.barcode("7874223750", .ean13))
        wait(for: [exp], timeout: 1.0)
    }

    // 8Ô∏è‚É£ ---------------------------------------------------------
    func test_isBarCodeScanned_shouldBecomeTrueAfterSuccessfulScan() {
        let exp = expectation(description: #function)
        let sut = makeSUT()
        sut.setupBindings()
        sut.subFlowType = .productEnrollment
        try? KeychainService.standard.saveStoreId(100)

        sut.$isBarCodeScanned
            .dropFirst()
            .sink { isScanned in
                XCTAssertTrue(isScanned)
                exp.fulfill()
            }
            .store(in: &cancellables)

        mockCameraManager.setCapturedData(.barcode("7874223750", .ean13))
        wait(for: [exp], timeout: 0.5)
    }

    // 9Ô∏è‚É£ ---------------------------------------------------------
    func test_loadingStatus_manualSetters_shouldReflectImmediately() {
        let sut = makeSUT()
        sut.loadingStatus = "Testing‚Ä¶"
        XCTAssertEqual(sut.loadingStatus, "Testing‚Ä¶")
        sut.loadingStatus = ""
        XCTAssertEqual(sut.loadingStatus, "")
    }

    // üîü ---------------------------------------------------------
    func test_showSettingAlert_shouldPublishAlertWithCorrectCopy() {
        let exp = expectation(description: #function)
        let sut = makeSUT()

        sut.showSettingAlert()

        sut.$showAlertError
            .sink { value in
                guard value else { return }
                XCTAssertEqual(sut.alertError.title, "Need Camera Access")
                XCTAssertEqual(sut.alertError.primaryButtonTitle, "Go to settings")
                exp.fulfill()
            }
            .store(in: &cancellables)

        wait(for: [exp], timeout: 0.3)
    }

    // 1Ô∏è‚É£1Ô∏è‚É£ ---------------------------------------------------------
    func test_fetchItemInfo_networkError_shouldNotSetProductInfo() {
        let exp = expectation(description: #function)

        // custom SUT with failing item service
        let failingItemService = MockItemDetailService(
            urlSession: MockURLSession(),
            keychainService: KeychainService.standard
        )
        failingItemService._shouldFail = true

        let sut = CameraViewModel(
            imageStoreManager: ImageStoreManager(),
            itemDetailService: failingItemService,
            sectionScanService: MockSectionLabelService(
                urlSession: MockURLSession(),
                keychainService: KeychainService.standard
            ),
            cameraManager: mockCameraManager
        )

        sut.setupBindings()
        sut.subFlowType = .productEnrollment
        try? KeychainService.standard.saveStoreId(100)

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            XCTAssertNil(sut.productInfo)
            XCTAssertFalse(sut.isBarCodeScanned)
            exp.fulfill()
        }

        mockCameraManager.setCapturedData(.barcode("invalid", .ean13))
        wait(for: [exp], timeout: 0.3)
    }

    // 1Ô∏è‚É£2Ô∏è‚É£ ---------------------------------------------------------
    func test_zoom_shouldForwardFactorToCameraManager() {
        let sut = makeSUT()

        sut.zoom(with: 2.5)
        XCTAssertEqual(mockCameraManager.lastZoomFactor, 2.5)

        sut.zoom(with: 0.8)
        XCTAssertEqual(mockCameraManager.lastZoomFactor, 0.8)
    }

    // 1Ô∏è‚É£3Ô∏è‚É£ ---------------------------------------------------------
    func test_switchFlash_multipleToggles_shouldFlipState() {
        let sut = makeSUT()
        let initial = sut.isFlashOn

        sut.switchFlash()
        XCTAssertEqual(sut.isFlashOn, !initial)

        sut.switchFlash()
        XCTAssertEqual(sut.isFlashOn, initial)
    }

    // 1Ô∏è‚É£4Ô∏è‚É£ ---------------------------------------------------------
    func test_subFlowType_assignment_roundTrips() {
        let sut = makeSUT()

        sut.subFlowType = .imageCaptureAndValidation
        XCTAssertEqual(sut.subFlowType, .imageCaptureAndValidation)

        sut.subFlowType = .productEnrollment
        XCTAssertEqual(sut.subFlowType, .productEnrollment)

        sut.subFlowType = .sectionImageCapture
        XCTAssertEqual(sut.subFlowType, .sectionImageCapture)

        sut.subFlowType = .sectionBarCodeScanner
        XCTAssertEqual(sut.subFlowType, .sectionBarCodeScanner)
    }
}
