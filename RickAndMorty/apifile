func test_setImageCaptureMode_shouldSetPhotoCaptureMode() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setImageCaptureMode()
    
    XCTAssertEqual(cameraViewModel.captureMode, .photo)
}

func test_restartProductScanner_shouldResetStateAndSetBarcodeMode() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Set initial state
    cameraViewModel.isBarCodeScanned = true
    cameraViewModel.productInfo = TestData.productInfoResponse
    
    cameraViewModel.restartProductScanner()
    
    XCTAssertFalse(cameraViewModel.isBarCodeScanned)
    XCTAssertEqual(cameraViewModel.captureMode, .barcode)
}

func test_showErrorAlert_shouldSetAlertErrorAndShowAlert() {
    let exp = XCTestExpectation(description: #function)
    let errorMessage = "Test error message"
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.showErrorAlert(with: errorMessage)
    
    cameraViewModel.$showAlertError
        .receive(on: DispatchQueue.main)
        .sink { value in
            guard value else { return }
            XCTAssertTrue(value)
            XCTAssertEqual(cameraViewModel.alertError.message, errorMessage)
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 2.0)
}

func test_captureImage_shouldCallCameraManagerCaptureImage() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // This test verifies the method is called without errors
    cameraViewModel.captureImage()
    
    // Since MockCameraManager doesn't track method calls, we just verify no crash
    XCTAssertTrue(true)
}
