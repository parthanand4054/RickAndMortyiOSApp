func test_setImageCaptureMode_shouldSetPhotoCaptureMode() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setImageCaptureMode()
    
    XCTAssertEqual(cameraViewModel.captureMode, .photo)
}

func test_restartProductScanner_shouldResetStateAndSetBarcodeMode() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Set initial state
    cameraViewModel.isBarCodeScanned = true
    cameraViewModel.productInfo = TestData.productInfoResponse
    
    cameraViewModel.restartProductScanner()
    
    XCTAssertFalse(cameraViewModel.isBarCodeScanned)
    XCTAssertEqual(cameraViewModel.captureMode, .barcode)
}

func test_showErrorAlert_shouldSetAlertErrorAndShowAlert() {
    let exp = XCTestExpectation(description: #function)
    let errorMessage = "Test error message"
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.showErrorAlert(with: errorMessage)
    
    cameraViewModel.$showAlertError
        .receive(on: DispatchQueue.main)
        .sink { value in
            guard value else { return }
            XCTAssertTrue(value)
            XCTAssertEqual(cameraViewModel.alertError.message, errorMessage)
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 2.0)
}

func test_captureImage_shouldCallCameraManagerCaptureImage() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // This test verifies the method is called without errors
    cameraViewModel.captureImage()
    
    // Since MockCameraManager doesn't track method calls, we just verify no crash
    XCTAssertTrue(true)
}



func test_setupBindings_withSectionBarCodeScannerSubFlowType_shouldProcessSectionScanning() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    mockSectionLabelService._shouldFail = false
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .sectionBarCodeScanner
    cameraViewModel.sectionLocation = "A20 Section 60"
    
    // Mock store ID for keychain
    try? KeychainService.standard.saveStoreId(100)
    
    mockCameraManager.setCapturedData(.barcode("123456", .ean13))
    
    // Wait a bit for async processing
    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
        exp.fulfill()
    }
    
    wait(for: [exp], timeout: 2.0)
}

func test_setupBindings_withSectionImageCaptureSubFlowType_shouldProcessSectionImage() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .sectionImageCapture
    mockCameraManager.setCapturedData(.image(UIImage.checkmark))
    
    cameraViewModel.$capturedImageCount
        .receive(on: DispatchQueue.main)
        .sink { count in
            guard count > 0 else { return }
            XCTAssertGreaterThan(count, 0)
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 2.0)
}


func test_capturedImageCount_shouldIncrementOnImageCapture() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    let initialCount = cameraViewModel.capturedImageCount
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .productEnrollment
    
    // First scan barcode to set up product info
    mockCameraManager.setCapturedData(.barcode("7874223750", .ean13))
    
    cameraViewModel.$productInfo
        .receive(on: DispatchQueue.main)
        .sink { productInfo in
            guard productInfo != nil else { return }
            // Then capture image
            self.mockCameraManager.setCapturedData(.image(UIImage.checkmark))
        }
        .store(in: &cancellables)
    
    cameraViewModel.$capturedImageCount
        .receive(on: DispatchQueue.main)
        .sink { count in
            guard count > initialCount else { return }
            XCTAssertGreaterThan(count, initialCount)
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 3.0)
}

func test_isBarCodeScanned_shouldUpdateOnSuccessfulScan() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .productEnrollment
    
    XCTAssertFalse(cameraViewModel.isBarCodeScanned)
    
    mockCameraManager.setCapturedData(.barcode("7874223750", .ean13))
    
    cameraViewModel.$isBarCodeScanned
        .receive(on: DispatchQueue.main)
        .sink { isScanned in
            guard isScanned else { return }
            XCTAssertTrue(isScanned)
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 2.0)
}

func test_loadingStatus_shouldUpdateDuringOperations() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Test setting loading status
    cameraViewModel.loadingStatus = "Testing..."
    XCTAssertEqual(cameraViewModel.loadingStatus, "Testing...")
    
    cameraViewModel.loadingStatus = ""
    XCTAssertEqual(cameraViewModel.loadingStatus, "")
}


func test_checkCameraPermissions_withDeniedPermission_shouldShowSettingsAlert() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Since we can't easily mock AVCaptureDevice.authorizationStatus,
    // we test the showSettingAlert method directly
    cameraViewModel.showSettingAlert()
    
    cameraViewModel.$showAlertError
        .receive(on: DispatchQueue.main)
        .sink { value in
            guard value else { return }
            XCTAssertTrue(value)
            XCTAssertEqual(cameraViewModel.alertError.title, "Need Camera Access")
            exp.fulfill()
        }
        .store(in: &cancellables)
    
    wait(for: [exp], timeout: 2.0)
}

func test_fetchItemInfo_withNetworkError_shouldHandleGracefully() {
    let exp = XCTestExpectation(description: #function)
    
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    mockItemDetailService._shouldFail = true
    
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    cameraViewModel.setupBindings()
    cameraViewModel.subFlowType = .productEnrollment
    
    // Mock store ID for keychain
    try? KeychainService.standard.saveStoreId(100)
    
    mockCameraManager.setCapturedData(.barcode("invalid_barcode", .ean13))
    
    // Wait for processing
    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
        XCTAssertNil(cameraViewModel.productInfo)
        exp.fulfill()
    }
    
    wait(for: [exp], timeout: 2.0)
}


func test_zoom_withValidFactor_shouldCallCameraManager() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Test various zoom factors
    cameraViewModel.zoom(with: 0.5)
    cameraViewModel.zoom(with: 2.0)
    cameraViewModel.zoom(with: 10.0)
    
    // Verify no crashes occur
    XCTAssertTrue(true)
}

func test_switchFlash_multipleTimes_shouldToggleCorrectly() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    let initialFlashState = cameraViewModel.isFlashOn
    
    cameraViewModel.switchFlash()
    XCTAssertEqual(cameraViewModel.isFlashOn, !initialFlashState)
    
    cameraViewModel.switchFlash()
    XCTAssertEqual(cameraViewModel.isFlashOn, initialFlashState)
}

func test_subFlowType_changes_shouldAffectBehavior() {
    let mockItemDetailService = MockItemDetailService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    let mockSectionLabelService = MockSectionLabelService(
        urlSession: MockURLSession(),
        keychainService: KeychainService.standard
    )
    
    let cameraViewModel = CameraViewModel(
        imageStoreManager: ImageStoreManager(),
        itemDetailService: mockItemDetailService,
        sectionScanService: mockSectionLabelService,
        cameraManager: mockCameraManager
    )
    
    // Test all SubFlowType values
    cameraViewModel.subFlowType = .imageCaptureAndValidation
    XCTAssertEqual(cameraViewModel.subFlowType, .imageCaptureAndValidation)
    
    cameraViewModel.subFlowType = .productEnrollment
    XCTAssertEqual(cameraViewModel.subFlowType, .productEnrollment)
    
    cameraViewModel.subFlowType = .sectionImageCapture
    XCTAssertEqual(cameraViewModel.subFlowType, .sectionImageCapture)
    
    cameraViewModel.subFlowType = .sectionBarCodeScanner
    XCTAssertEqual(cameraViewModel.subFlowType, .sectionBarCodeScanner)
}
